hush
 
-- new project for EP made completely inside tidal

do
    let autos a b = (range a b $ saw)
    let autor c d = (range c d $ rand)
    let autonotes e f = (range e f rand)
    let cl channel cycles = (clutchIn channel cycles)
    let fd channel cycles = (xfadeIn channel cycles)
    let nt = note
    let rtmvar = choose [2,4,8,16]
    let mov1 = choose [0,7,5,-3]
    let mov2 = "[12]" 
    let mov3 ="0" |+| "<5 4 -3 -3>" 
    let spd = "1"
    let stutInput = 0
    let del a = delay a
    let delT a = delaytime a
    let delF a = delayfeedback a
    let void = fast 1
    let num = 8
    let swng = (swingBy (4/24) 8) -- the sweet sopt (4/28) or (4/24)
    let center = 
            always (#pan 0.5)
    let delunit a b c =
            (# delay a)
            .(#delaytime b)
            .(#delayfeedback c)
    let roomunit a b c =
            (# room a)
            .(# size b)
            .(# dry c)
    let autopan = (#pan (autos 0 1))
    -- 
    -- TEMPO
    --
    setcps (140/240)
    --
    -- FUNCTION GROUPS
    --
    let send =
            roomunit 0.3 0.7 0.9
            .delunit 0.4 (1/4) 0.2
    let fx1 =  
            void
            .fast (spd)
            . every 4 (
                (# crush "8 .. <8 4>")
            )
<<<<<<< HEAD
    let fx2 =
=======
            . chop 1
            . (#shape 0.8)
            . (# triode "0.3 .. 0.7")
            . autopan
    let func2 =
>>>>>>> 3faef7bc6b04e5c52c57cea064ee7d7876ed0783
            void
            .whenmod 8 8 (
                void
                .(# hpf (fast 0.5 $ "50 .. 1" * "100"))
                .(# hpq 0.2)
            )
    let fx = 
            void
            .fx1
            .fx2
    let func3 = 
            void
            .every 1 (
                void
                .(# speed ("0 .. 7" * "-1"))
                .chop 2
                .every "<4 9 12>" (
                    chop 24
                )
                .fast 1
            )
    let func1 = 
            void
            .slow "4 .. 2 .. 1 .. 1/8"
    --
    -- FUNCTION SWITCHES
    --
    let func =
            void
            .func1
            -- .func2
            .func3
    --
    -- NOTE MANIPULATION
    --
    let masterPitch =
            (|+| nt "-5").
            (|+| nt "[0 [~ 12] 7 0]*2").
            slow 4.
            (|+| nt "<5 9 7 5>")
    --        
    -- TRACK MANIPULATION
    --
    let trackio = do
            p 1 silence
            -- p "bass" silence
            p "pad" silence
            p "drums" silence
            -- p "kic" silence
            p "synths" silence
            p 0 silence
    --
    -- filters
    --
    let filter = 
          every 1 (    
<<<<<<< HEAD
                (#lpf ("[10 .. 1] * 2" * "[10 .. 1] * 1" * "[10 .. 1]" * "80"))
=======
                (#lpf ("[10 .. 1] * 2" * "[10 .. 1] * 4" * "[10 .. 1]" * "10"))
>>>>>>> 3faef7bc6b04e5c52c57cea064ee7d7876ed0783
                -- (#hpf ("[1 .. 10] * 8" * "[5 .. 10] * 2" * "[1 .. 10]" * "100"))
                . (#lpq 0.2)
          )
    --
    --
    --
    p "drums"
        $ (
<<<<<<< HEAD
            void
            .func
            .send
            .fx
=======
            func
            . filter
>>>>>>> 3faef7bc6b04e5c52c57cea064ee7d7876ed0783
            . whenmod 8 2 (
                struct (binary "234")
            )
        )
        $ stack
        [
            loopAt 4 $ slice 8 "[0 .. 7]*4*2*<4 2>" $ "tokyo" # n 2 # shape 0.7 # crush ("3 .. 7" * " 12 .. 3") # hpf 100,
            struct "1 0 1 1 1 0 1 1" $ loopAt 4 $ randslice 32 $ "tokyo" # n 5 #shape 0.8,-- # hpf 3000 # hpq 0.1,
            "~ sn ~ sn" # n 1 # shape 0.5 # crush 3,
            "~ psr*16" # n (irand 8) # hpf 3000
        ]
        # legato 0.8
        # orbit 1
    p "pad"
        $ (
            void
<<<<<<< HEAD
            .func
            .fx
            .struct "[~ [1 ~ ]]"
=======
            .struct "1*[16]/4"
>>>>>>> 3faef7bc6b04e5c52c57cea064ee7d7876ed0783
            .randslice 4
            .chop 8
            .jux rev
            .filter
            .(#hpf 500)
            .send
            .(#lpf 0.0)
        )
        $ "pad"
        # shape 0.4
        # speed "<12>/4" |*| speed "1 .. 0.25" |*| speed "0.05"
        # orbit 2
        # legato (slow 4 $  range 0.9 0.1 (tri))
    p "bass"
        $ (
                (#lpf ("[10 .. 1] * 8" * "[1 .. 10]/2 [10 .. 1]/2" * "50"))
                .(#lpq 0.2)
<<<<<<< HEAD
                .struct "[0 1 1 1 0 1 1 1]*2 "
                .every 4 (
                    struct "[0 0 1 1 0 1 0 1]*2"
                )
                .(#speed "[1 [1 2] -1*[1 2] 1 0.5 1 [0.5 2] 1]*1")
                .fx
                -- .func 
                -- .(#nt ("<-3 -5 -7>/4"))
=======
                .struct "[0 1 1 1 0 1 1 1]/<4 2 8> "
                -- .(#speed "[1 [1 2] -1*[1 2] 1 0.5 1 [0.5 2] 1]*1")
                .func 
                .(#nt ("<0 7 5 0>/4"))
>>>>>>> 3faef7bc6b04e5c52c57cea064ee7d7876ed0783
                -- .(# hpf ("50" * "[1 .. 20]/2 [20 .. 1]/2" ))
                -- .(# hpq 0.2)
                .chop 2
        ) 
        $ "dbas" 
        # orbit 5
        -- # note "12"
        # shape 0.7
        # n 2
        # legato 0.9
        # gain 0.9
    p "kic"
        $ (
            void
            .fx
            .filter
            -- .func
            .every 8 (
                chop 4
            )
        )
        $ stack 
        [
<<<<<<< HEAD
            every 4 (struct "[0 1 1 0]*4") $  "[bd*2] sn [~ bd] [~ sn]" # shape 0.6,
            "hh*16" # n 1,
            "~ oh ~ oh"
=======
            -- "gaba*4" # shape 0.6 # release 0.6 ,
            "hh*16",
            "[~ oh]*<4>",
            randslice 16 $ "[slowbreaks*4]*4" * "2 .. 32" # n 2 #shape 0.5 # legato 0.2
>>>>>>> 3faef7bc6b04e5c52c57cea064ee7d7876ed0783
        ]
        -- # hpf 400
        # distort 0.3
        # orbit 4
        # gain 0.96
        # legato "0.8" -- 
        -- "1 .. 0.5 .. 0.5 .. 1"
    trackio

    
